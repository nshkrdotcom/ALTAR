searchData={"items":[{"type":"extras","title":"README","doc":"ALTAR Protocol \n\n \n   The Agent & Tool Arbitration Protocol \n   \n   A comprehensive, language-agnostic, and transport-agnostic protocol designed to enable secure, observable, and stateful interoperability between autonomous agents, AI models, and traditional software systems. \n \n\n \n       \n       \n       \n       \n \n\n---","ref":"readme.html"},{"type":"extras","title":"Overview - README","doc":"ALTAR (The Agent & Tool Arbitration Protocol) establishes a new standard for how AI agents and software systems interact with tools. It follows a **Host-Runtime** architecture where a central **Host** process orchestrates communication between multiple **Runtime** processes, each offering specialized tools and capabilities.\n\nThis design ensures security, scalability, and observability are built-in, not bolted on.\n\n\n```mermaid\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'background': '#ffffff',\n      'primaryColor': '#f8fafc',\n      'primaryTextColor': '#1e293b',\n      'lineColor': '#64748b',\n      'secondaryColor': '#e2e8f0',\n      'tertiaryColor': '#f1f5f9',\n      'primaryBorderColor': '#e2e8f0',\n      'secondaryBorderColor': '#cbd5e1',\n      'tertiaryBorderColor': '#94a3b8'\n    }\n  }\n}%%\ngraph LR\n    subgraph AE [\"ALTAR Ecosystem\"]\n      direction LR\n      style AE fill:#f8fafc,stroke:#e2e8f0\n\n        subgraph HL [\"Host Layer\"]\n            style HL fill:#f1f5f9,stroke:#cbd5e1,color:#475569\n            HOST[ALTAR Host]\n            style HOST fill:#4338ca,stroke:#3730a3,color:#ffffff,fontWeight:bold\n        end\n        \n        subgraph RL [\"Runtime Layer\"]\n            style RL fill:#f1f5f9,stroke:#cbd5e1,color:#475569\n            RT1[Python Runtime]\n            RT2[Elixir Runtime]\n            RT3[Go Runtime]\n            style RT1 fill:#34d399,stroke:#25a274,color:#ffffff\n            style RT2 fill:#34d399,stroke:#25a274,color:#ffffff\n            style RT3 fill:#34d399,stroke:#25a274,color:#ffffff\n        end\n        \n        subgraph CL [\"Client Layer\"]\n            style CL fill:#f1f5f9,stroke:#cbd5e1,color:#475569\n            AI[AI Agents]\n            APP[Applications]\n            style AI fill:#38bdf8,stroke:#2899c8,color:#ffffff\n            style APP fill:#38bdf8,stroke:#2899c8,color:#ffffff\n        end\n    end\n    \n    AI --> HOST\n    APP --> HOST\n    HOST <--> RT1\n    HOST <--> RT2\n    HOST <--> RT3\n```","ref":"readme.html#overview"},{"type":"extras","title":"Key Features - README","doc":"*   üõ°Ô∏è **Secure by Default**: The Host manages all tool contracts. Runtimes *fulfill* contracts, they don't define them, preventing \"Trojan Horse\" vulnerabilities.\n*   üåê **Language & Transport Agnostic**: Implement Runtimes in any language (Python, Go, Node.js, Elixir, etc.) and communicate over any transport (gRPC, WebSockets, TCP, etc.).\n*   ‚ö° **Developer-Friendly Workflow**: A dual-mode system (`STRICT` vs. `DEVELOPMENT`) provides a secure-by-default path for production while enabling rapid developer iteration.\n*   üîç **Built-in Observability**: End-to-end tracing is a first-class feature, with `correlation_id`s propagated through the entire call chain.\n*   üì¶ **Stateful Sessions**: Isolate context, state, and toolsets for different applications or users with first-class session management.\n*   üìà **Clear Compliance Levels**: Adopt the protocol incrementally, from a minimal core implementation (Level 1) to a full enterprise-grade deployment (Level 3).","ref":"readme.html#key-features"},{"type":"extras","title":"Project Status - README","doc":"**The Altar Protocol specification is v1.0 complete and ready for implementation.**\n\nThe design has been finalized, incorporating extensive feedback on security, developer experience, and enterprise requirements. The next phase is to build the reference implementations of the Host and Runtimes.\n\nFor full details on the final review, see [docs/20250803_kiroSpecFinished_NextSteps.md](docs/20250803_kiroSpecFinished_NextSteps.md).","ref":"readme.html#project-status"},{"type":"extras","title":"Implementation Vision: The Elixir Host - README","doc":"The Altar protocol will be brought to life through a **Canonical Elixir Host** and a series of **Lightweight Runtime SDKs** for other languages. This \"hub and spoke\" model is a deliberate architectural choice that plays to the strengths of each technology.\n\n#### 1. The Canonical Host (This Repository)\n\nThe Altar Host is the complex orchestration engine responsible for session management, security, and message routing. Given these requirements, the canonical implementation of the Host is built in **Elixir**.\n\nThe BEAM and OTP provide the perfect foundation for this work, offering the world-class concurrency, fault-tolerance, and scalability required for a robust central orchestrator.\n\nFor Elixir developers, the Host is a simple library to be included in any application. You can get an enterprise-grade tool bridge running inside your existing Elixir application by adding `Altar.Supervisor` to your supervision tree.\n\n#### 2. Lightweight Runtime SDKs\n\nFor every other language (Python, Go, TypeScript, etc.), the goal is to provide a simple, idiomatic **Runtime SDK**. A developer wanting to expose their tools will only need to `pip install altar-runtime`, add a decorator to their functions, and point it at the central Elixir Host.\n\nThis strategy simplifies development and ensures that the core security and orchestration logic remains consistent and robust for the entire ecosystem.","ref":"readme.html#implementation-vision-the-elixir-host"},{"type":"extras","title":"Documentation - README","doc":"","ref":"readme.html#documentation"},{"type":"extras","title":"License - README","doc":"This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\nThe complete protocol specification can be found in the `.kiro/specs/altar-protocol` directory.\n\n*   **[Design Document](.kiro/specs/altar-protocol/design.md)**: The core architecture, message schemas (IDL), and security model.\n*   **[Requirements Document](.kiro/specs/altar-protocol/requirements.md)**: The detailed requirements and acceptance criteria.\n*   **[Implementation Plan](.kiro/specs/altar-protocol/tasks.md)**: The task-by-task plan for building the reference implementation.\n\n---","ref":"readme.html#license"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}